import os
import logging
import redis
import requests
from urllib.parse import urljoin
import time

from dotenv import load_dotenv

from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Filters, Updater, CallbackContext
from telegram.ext import CallbackQueryHandler, CommandHandler, MessageHandler

from strapi_service import (
    get_products, get_product_image, get_cart,
    add_to_cart_item, get_products_from_cart, create_client, connect_client_to_cart,
    create_cart, format_cart_content
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


_database = None

def error_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")


def start(update: Updater, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –º–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /start
    if 'products' not in context.bot_data or (update.message and update.message.text == '/start'):
        strapi_api_token = context.bot_data['strapi_api_token']
        strapi_url = context.bot_data['strapi_url']
        products = get_products(strapi_api_token, strapi_url)
        context.bot_data['products'] = products
        
        # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /start - —Å–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ Strapi
        if update.message and update.message.text == '/start':
            tg_id = str(update.message.from_user.id)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–Ω –ª–∏ –∫–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º tg_id
            client_id = create_client(strapi_api_token, tg_id, strapi_url)
            if client_id:
                logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç —Å ID: {client_id}")
    else:
        products = context.bot_data['products']

    product_buttons = [
        [InlineKeyboardButton(
            product.get('title'),
            callback_data=str(product.get('id'))
        )]
        for product in products
    ]
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ—Ä–∑–∏–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    product_buttons.append([
        InlineKeyboardButton("üõí –ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞", callback_data='show_cart')
    ])
    reply_markup = InlineKeyboardMarkup(product_buttons)

    greeting = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:"
    menu_prompt = "–¢–æ–≤–∞—Ä—ã —Å–ø–∏—Å–∫–æ–º:"

    if update.message:
        update.message.reply_text(greeting, reply_markup=reply_markup)
    else:
        query = update.callback_query
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        context.bot.send_message(
            chat_id=query.message.chat_id,
            text=menu_prompt,
            reply_markup=reply_markup
        )
        # –ü–æ—Ç–æ–º —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ
        query.message.delete()

    return 'HANDLE_MENU'


def handle_menu(update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞."""
    # –ü–æ–ª—É—á–∞–µ–º callback_query –∏–∑ update
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É,
    # —Ç–æ callback_query –±—É–¥–µ—Ç None. –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –º—ã –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ HANDLE_MENU,
    # —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
    query = update.callback_query
    if not query:
        return "HANDLE_MENU"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ callback_query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
    query.answer()

    if query.data == 'back_to_menu':
        start(update, context)
        return "HANDLE_MENU"

    if query.data == 'show_cart':
        return show_cart(update, context)
    if query.data.startswith('add_to_cart:'):
        return handle_cart_action(update, context)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∫—ç—à–∞
    # –ë–µ—Ä–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ bot_data, –∫—É–¥–∞ –æ–Ω –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Ä–∞–Ω–µ–µ
    products = context.bot_data['products']

    # –ò—â–µ–º —Ç–æ–≤–∞—Ä –≤ —Å–ø–∏—Å–∫–µ products, —É –∫–æ—Ç–æ—Ä–æ–≥–æ id —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ callback_query
    # next() –≤–µ—Ä–Ω–µ—Ç –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    # p['id'] –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å query.data, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∞
    product = next(
        (p for p in products if str(p['id']) == query.data),
        None
    )
    
    if not product:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        context.bot.send_message(
            chat_id=query.message.chat_id,
            text="–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')
            ]])
        )
        query.message.delete()
        return "HANDLE_MENU"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = (
        f"{product['title']}\n"
        f"–¶–µ–Ω–∞: {product.get('price', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')} —Ä—É–±.\n"
        f"{product.get('description', '')}"
    )
    
    keyboard = [[
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu'),
        InlineKeyboardButton("‚úî –í –∫–æ—Ä–∑–∏–Ω—É", callback_data=f'add_to_cart:{product["id"]}'),
        InlineKeyboardButton("üõí –ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞", callback_data='show_cart')
    ]]
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
    image_data = None
    image_data = get_product_image(
        context.bot_data['strapi_url'],
        product['small_image_url']
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if image_data:
        context.bot.send_photo(
            chat_id=query.message.chat_id,
            photo=image_data,
            caption=message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        context.bot.send_message(
            chat_id=query.message.chat_id,
            text=message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    query.message.delete()
    return "HANDLE_DESCRIPTION"


def show_cart(update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    chat_id = str(query.message.chat_id)

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ URL –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        strapi_api_token = context.bot_data['strapi_api_token']
        strapi_url = context.bot_data['strapi_url']
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cart_id = get_cart(
            chat_id,
            strapi_api_token,
            strapi_url
        )
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            query.message.delete()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏
        if not cart_id:
            # –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
            message_text = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
        else:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
            cart_data = get_products_from_cart(
                chat_id,
                strapi_api_token,
                strapi_url
            )
            message_text = format_cart_content(cart_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        context.bot.send_message(
            chat_id=chat_id,
            text=message_text,
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='back_to_menu')
            ]])
        )

        return "HANDLE_MENU"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        context.bot.send_message(
            chat_id=chat_id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='back_to_menu')
            ]])
        )
        return "HANDLE_MENU"


def handle_cart_action(update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å –∫–æ—Ä–∑–∏–Ω–æ–π (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞)."""
    query = update.callback_query
    query.answer()
    tg_id = str(query.message.chat_id)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö callback
    product_id = query.data.split(':')[1]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ URL –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    strapi_api_token = context.bot_data['strapi_api_token']
    strapi_url = context.bot_data['strapi_url']
    
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    client_id = create_client(tg_id, strapi_api_token, strapi_url)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –∫–æ—Ä–∑–∏–Ω—É
    cart_id = get_cart(tg_id, strapi_api_token, strapi_url)
    if not cart_id:
        cart_id = create_cart(tg_id, strapi_api_token, strapi_url)
    
    # –°–≤—è–∑—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å –∫–æ—Ä–∑–∏–Ω–æ–π
    connect_client_to_cart(client_id, cart_id, strapi_api_token, strapi_url)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
    result = add_to_cart_item(tg_id, product_id, strapi_api_token, strapi_url)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        query.message.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    message_text = "‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!" if result else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É."
        

    context.bot.send_message(
        chat_id=tg_id,
        text=message_text,
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='back_to_menu'),
            InlineKeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞", callback_data='show_cart')
        ]])
    )
    
    return "HANDLE_MENU"


def handle_users_reply(update, context):
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –ª—é–±–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–µ—à–∞–µ—Ç –∫–∞–∫ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.
    """
    if update.message:
        user_reply = update.message.text
        chat_id = update.message.chat_id
    elif update.callback_query:
        user_reply = update.callback_query.data
        chat_id = update.callback_query.message.chat_id
    else:
        return

    if user_reply == '/start':
        user_state = 'START'
    else:
        # –ü–æ–ª—É—á–∞–µ–º Redis –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–æ—Ç–∞
        redis_db = context.bot_data.get('db')
        user_state = redis_db.get(chat_id) if redis_db else None
        if user_state is None:
            user_state = 'START'
        else:
            user_state = user_state.decode("utf-8")

    states_functions = {
        'START': start,
        'HANDLE_MENU': handle_menu,
        'HANDLE_DESCRIPTION': handle_menu,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    }
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_handler = states_functions[user_state]
        next_state = state_handler(update, context)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        redis_db = context.bot_data.get('db')
        if redis_db and next_state:
            redis_db.set(chat_id, next_state)
    except Exception as err:
        logger.error(f'–û—à–∏–±–∫–∞: {err}')


def get_database_connection(redis_db_host, redis_db_port, database_password):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω–µ–∫—à–Ω —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö Redis, –ª–∏–±–æ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω.
    """
    global _database
    if _database is None:
        _database = redis.Redis(
            host=redis_db_host,
            port=redis_db_port,
            password=database_password,
            decode_responses=True 
        )
    return _database


def main():
    load_dotenv()
    strapi_url = os.getenv('STRAPI_URL')
    strapi_api_token = os.getenv('STRAPI_API_TOKEN')
    
    database_host = os.getenv("REDIS_HOST")
    database_port = os.getenv("REDIS_DATABASE_PORT")
    database_password = os.getenv("REDIS_DATABASE_PASSWORD")
    token = os.getenv("TG_BOT_TOKEN")
    
    db = get_database_connection(
        database_host,
        database_port,
        database_password
    )
    updater = Updater(token)
    dispatcher = updater.dispatcher

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    dispatcher.add_error_handler(error_handler)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ context.bot_data
    dispatcher.bot_data['strapi_api_token'] = strapi_api_token
    dispatcher.bot_data['strapi_url'] = strapi_url
    dispatcher.bot_data['db'] = db

    dispatcher.add_handler(CommandHandler('start', start))
    dispatcher.add_handler(CallbackQueryHandler(handle_menu))
    dispatcher.add_handler(MessageHandler(Filters.text, handle_users_reply))
    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
